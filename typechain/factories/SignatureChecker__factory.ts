/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SignatureChecker,
  SignatureCheckerInterface,
} from "../SignatureChecker";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_messageHash",
        type: "bytes32",
      },
    ],
    name: "getEthSignedMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
    ],
    name: "getWithdrawMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_ethSignedMessageHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
    ],
    name: "recoverSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "splitSignature",
    outputs: [
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610632806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a7bb580311610050578063a7bb58031461011f578063d1024b4514610150578063fa5408011461017357600080fd5b80635bea16401461006c57806397aba7f9146100e7575b600080fd5b6100d461007a3660046104f4565b6040516bffffffffffffffffffffffff19606086811b8216602084015285901b1660348201526048810183905260688101829052600090608801604051602081830303815290604052805190602001209050949350505050565b6040519081526020015b60405180910390f35b6100fa6100f536600461054d565b6101d4565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100de565b61013261012d366004610592565b610253565b60408051938452602084019290925260ff16908201526060016100de565b61016361015e366004610475565b6102e5565b60405190151581526020016100de565b6100d4610181366004610535565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6000806000806101e385610253565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa15801561023e573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600080600083516041146102c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015260640160405180910390fd5b50505060208101516040820151606090920151909260009190911a90565b60408051606087811b6bffffffffffffffffffffffff199081166020808501919091529188901b166034830152604882018690526068808301869052835180840390910181526088830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a884015260c48084018290528451808503909101815260e49093019093528151910120600091908873ffffffffffffffffffffffffffffffffffffffff166103a182866101d4565b73ffffffffffffffffffffffffffffffffffffffff16149998505050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146103e957600080fd5b919050565b600082601f8301126103fe578081fd5b813567ffffffffffffffff80821115610419576104196105cd565b604051601f8301601f19908116603f01168101908282118183101715610441576104416105cd565b81604052838152866020858801011115610459578485fd5b8360208701602083013792830160200193909352509392505050565b60008060008060008060c0878903121561048d578182fd5b610496876103c5565b95506104a4602088016103c5565b94506104b2604088016103c5565b9350606087013592506080870135915060a087013567ffffffffffffffff8111156104db578182fd5b6104e789828a016103ee565b9150509295509295509295565b60008060008060808587031215610509578384fd5b610512856103c5565b9350610520602086016103c5565b93969395505050506040820135916060013590565b600060208284031215610546578081fd5b5035919050565b6000806040838503121561055f578182fd5b82359150602083013567ffffffffffffffff81111561057c578182fd5b610588858286016103ee565b9150509250929050565b6000602082840312156105a3578081fd5b813567ffffffffffffffff8111156105b9578182fd5b6105c5848285016103ee565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220c415d139053add028d6db9b14011ddaca716cedc2ef07a6b4841ca73c4e6554964736f6c63430008040033";

export class SignatureChecker__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignatureChecker> {
    return super.deploy(overrides || {}) as Promise<SignatureChecker>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SignatureChecker {
    return super.attach(address) as SignatureChecker;
  }
  connect(signer: Signer): SignatureChecker__factory {
    return super.connect(signer) as SignatureChecker__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignatureCheckerInterface {
    return new utils.Interface(_abi) as SignatureCheckerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignatureChecker {
    return new Contract(address, _abi, signerOrProvider) as SignatureChecker;
  }
}
